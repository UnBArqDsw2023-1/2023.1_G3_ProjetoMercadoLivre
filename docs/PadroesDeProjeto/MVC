# MVC (Model-View-Controller)

## 1. INTRODUÇÃO: Desing Patterns e o padrão arquitetural MVC

<p align="justify">
Padrões de projeto arquiteturais são soluções abstratas para problemas recorrentes no design de sistemas de software em um nível mais amplo, relacionados à estruturação, organização e interações entre os componentes de um sistema. Esses padrões fornecem diretrizes de alto nível para ajudar a criar sistemas robustos, flexíveis e de fácil manutenção.

Um exemplo de padrão de projeto arquitetural é o Modelo-View-Controller (MVC). No MVC, o modelo representa a lógica de negócios e os dados subjacentes do sistema, a visão é responsável pela apresentação dos dados ao usuário e o controlador atua como intermediário entre o modelo e a visão, gerenciando as interações do usuário e atualizando o modelo e a visão conforme necessário.

Outra informação relevante refere-se ao MVC ser amplamente utilizado em aplicações web e desktop para separar a lógica de negócios, a apresentação dos dados e a interação do usuário, permitindo uma melhor organização e manutenção do código. Ele oferece benefícios como a reutilização de código, a modificação independente da interface do usuário e a escalabilidade do sistema.

Assim, os padrões de projeto arquiteturais, como o MVC, fornecem uma estrutura e diretrizes para projetar a estrutura geral de um sistema, promovendo a modularidade, a reusabilidade e a manutenibilidade.
</p> 

## 1. METODOLOGIA
<p align="justify">
A metodologia do Modelo-View-Controller (MVC) é uma abordagem de desenvolvimento de software que segue uma estrutura organizacional específica. Ela divide as responsabilidades em três componentes principais: o Modelo (Model), a Visão (View) e o Controlador (Controller).

Modelo (Model): O modelo representa a lógica de negócios e os dados subjacentes da aplicação. Ele é responsável por armazenar e gerenciar os dados, bem como fornecer operações para acessar, atualizar e manipular esses dados. O modelo encapsula a funcionalidade central da aplicação e é independente da interface do usuário.

Visão (View): A visão é responsável pela apresentação dos dados ao usuário. Ela exibe visualmente as informações fornecidas pelo modelo e interage com o usuário. A visão é responsável pela renderização dos dados de forma adequada, seguindo as regras de apresentação definidas. Pode haver várias visões diferentes que exibem os mesmos dados de maneiras distintas, dependendo dos requisitos e das preferências do usuário.

Controlador (Controller): O controlador atua como intermediário entre o modelo e a visão. Ele recebe as interações do usuário na interface (como cliques, digitação etc.) e atualiza o modelo ou a visão, conforme necessário. O controlador processa as solicitações do usuário, manipula a lógica de negócios adicional, coordena a interação entre o modelo e a visão e mantém a consistência do sistema.

A interação entre os componentes é gerenciada de acordo com o fluxo de controle do MVC. Normalmente, o usuário interage com a visão, que aciona eventos que são capturados pelo controlador. O controlador, por sua vez, atualiza o modelo conforme necessário e notifica a visão sobre as alterações. A visão, então, obtém os dados atualizados do modelo e os apresenta ao usuário.
</p> 

## 1. ARTEFATO: Diagrama de Pacotes MVC
Diante do exposto, a partir da modelagem conceitual ([Diagrama de Classes Geral do projeto](https://unbarqdsw2023-1.github.io/2023.1_G3_ProjetoMercadoLivre/#/Modelagem/UMLEstaticos/DiagramaDeClasses)), foi desenvolvido um diagrama de pacotes, mais precisamente contendo 3 pacotes, um para cada nível de responsabilidade (Modelo, Visão e Controlador).
Por meio desse diagrama, é possível vizualisar o fluxo de páginas a partir de associações simples entre as páginas de interação com os usuários no pacote View, as  regras de negócio, entidades, camada de acesso à dados no pacote Model  e, por fim,
a coordeção e controle do fluxo de dados entre a model e a view no pacote Controller. A figura 1 a seguir apresenta este diagrama.

![Diagrama de Componentes](../../Assets/Componentes-pacotes-Implantacao/DiagramaPacotesMVC.png)
